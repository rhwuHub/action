package com.blog.utils;import com.github.benmanes.caffeine.cache.Cache;import jakarta.annotation.Resource;import lombok.extern.slf4j.Slf4j;import net.mamoe.mirai.Bot;import net.mamoe.mirai.BotFactory;import net.mamoe.mirai.event.events.FriendMessageEvent;import net.mamoe.mirai.message.data.MessageChain;import net.mamoe.mirai.message.data.MessageChainBuilder;import net.mamoe.mirai.message.data.QuoteReply;import net.mamoe.mirai.message.data.SingleMessage;import org.springframework.stereotype.Component;import top.mrxiaom.qsign.QSignService;import java.io.File;import java.util.concurrent.Executors;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.TimeUnit;@Component@Slf4jpublic class BotUtil {    @Resource    private Cache<String, Object> caffeineCache;    private ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);    public static void main(String[] args) {        BotUtil botUtil = new BotUtil();        QSignService.Factory.init(new File("D:\\work\\gitCode\\action\\Blog-server\\src\\main\\resources\\txlib\\8.9.63"));        // 加载签名服务所需协议信息，如果你的协议信息存在非 以上的工作目录 中的文件夹，请将参数 null 改为协议信息所在目录        // 该方法将会扫描目录下以协议信息命名的文件进行加载，如 android_phone.json        // 如果你想单独加载协议信息文件，详见 loadProtocolExample() 中的例子        QSignService.Factory.loadProtocols(null);        // 注册签名服务        QSignService.Factory.register();        Bot bot = BotFactory.INSTANCE.newBot(2943334252L, "Wuruihao5");        // Bot bot = BotFactory.INSTANCE.newBot(2943334252L, BotAuthorization.byQRCode(), configuration -> {        //     configuration.setProtocol(BotConfiguration.MiraiProtocol.MACOS);        //     configuration.setWorkingDir(new File("C:/mirai"));        // });        bot.login();        botUtil.afterLogin(bot);    }    public  void afterLogin(Bot bot) {        long yourQQNumber = 2249415510L;        bot.getEventChannel().subscribeAlways(FriendMessageEvent.class, (event) -> {            if (event.getSender().getId() == yourQQNumber) {                event.getSubject().sendMessage(                        new MessageChainBuilder()                        .append(new QuoteReply(event.getMessage()))                        .append("白徐吊，赶紧睡！！！")                        .build()                );            }            if (event.getSender().getId() == 2300889886L) {                log.info("receive message:{}",event.getMessage());                if (event.getMessage().toString().contains("stop")){                    log.info("receive stop");                    stopTask();                }                if (event.getMessage().toString().contains("start")){                    log.info("receive start");                    startTask(bot);                }            }        });    }    private synchronized void startTask(Bot bot) {        caffeineCache.put("keepRunning", true);        if (scheduler.isShutdown() || scheduler.isTerminated()) {            scheduler = Executors.newScheduledThreadPool(1);        }        scheduler.scheduleAtFixedRate(sendMessageTask(bot), 0, 1, TimeUnit.SECONDS);    }    private synchronized void stopTask() {        caffeineCache.put("keepRunning", false);    }    private Runnable sendMessageTask(Bot bot) {        return () -> {            if (!(boolean) caffeineCache.getIfPresent("keepRunning")) {                scheduler.shutdown(); // 停止任务                return;            }            // 替换为你的实际发送消息的代码            bot.getFriend(2249415510L).sendMessage("老子要就寝了，快睡觉！快睡觉！快睡觉！");        };    }}// class WithConfiguration1 {//     public static void main(String[] args) {//         BotUtil botUtil = new BotUtil();////         QSignService.Factory.init(new File("D:\\work\\gitCode\\action\\Blog-server\\src\\main\\resources\\txlib\\8.9.63"));//         // 加载签名服务所需协议信息，如果你的协议信息存在非 以上的工作目录 中的文件夹，请将参数 null 改为协议信息所在目录//         // 该方法将会扫描目录下以协议信息命名的文件进行加载，如 android_phone.json//         // 如果你想单独加载协议信息文件，详见 loadProtocolExample() 中的例子//         QSignService.Factory.loadProtocols(null);//         // 注册签名服务//         QSignService.Factory.register();//         // 使用自定义配置//         Bot bot = BotFactory.INSTANCE.newBot(2943334252L, "Wuruihao5", new BotConfiguration() {{//             fileBasedDeviceInfo(); // 使用 device.json 存储设备信息//             setProtocol(MiraiProtocol.ANDROID_PHONE); // 切换协议//         }});//         bot.login();////         botUtil.afterLogin(bot);//     }// }