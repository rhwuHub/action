package com.blog.config;import com.github.benmanes.caffeine.cache.Cache;import com.github.benmanes.caffeine.cache.Caffeine;import lombok.extern.slf4j.Slf4j;import org.springframework.cache.caffeine.CaffeineCacheManager;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import java.util.concurrent.TimeUnit;@Configuration@Slf4jpublic class CacheConfig {    @Bean    public CaffeineCacheManager cacheManager() {        CaffeineCacheManager cacheManager = new CaffeineCacheManager("Cache");        cacheManager.setCaffeine(Caffeine.newBuilder()                .maximumSize(100)                .expireAfterWrite(10, TimeUnit.MINUTES)                .expireAfterAccess(10, TimeUnit.MINUTES));        return cacheManager;    }    @Bean    public Cache<String, Object> caffeineCache() {        Cache<String, Object> build = Caffeine.newBuilder()                // 设置最后一次写入或访问后经过固定时间过期                .expireAfterWrite(600, TimeUnit.SECONDS)                // 初始的缓存空间大小                .initialCapacity(1000)                // 缓存的最大条数                .maximumSize(1000)                .build();        build.put("keepRunning",false);        return build;    }}